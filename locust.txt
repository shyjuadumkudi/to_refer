Step-by-Step Guide: Using Locust with Django for DB Performance Testing
1. Prerequisites
Python 3.7+

Your Django app is up and running

YugabyteDB connection is working via Django ORM

pip installed

2. Install Locust
pip install locust

3. Django Setup: Create a Testable API Endpoint
To test DB performance, create an endpoint in Django that interacts with the database.

# your_app/views.py
from django.http import JsonResponse
from your_app.models import Product  # or your target model

def product_list(request):
    # Simulates DB read operation
    products = list(Product.objects.all()[:10].values())
    return JsonResponse(products, safe=False)

# your_app/urls.py
from django.urls import path
from .views import product_list

urlpatterns = [
    path('api/products/', product_list),
]

Make sure this is available in your test/staging environment and protected if needed.

4. Create Locust Test Script
Create a locustfile.py in the root of your project or in a dedicated folder like load_tests/.

# locustfile.py
from locust import HttpUser, task, between

class DjangoUser(HttpUser):
    wait_time = between(1, 2.5)  # seconds between tasks

    @task
    def get_products(self):
        self.client.get("/api/products/")

This tests the Django + ORM + DB stack via HTTP.

5. Run Locust
locust -f locustfile.py --host=http://localhost:8000

Then go to http://localhost:8089 to start the test:

Set number of users (e.g., 50)

Set spawn rate (e.g., 5 users/sec)


6. If You Want to Test Django Logic without HTTP (Advanced)
You can use Locust + Django ORM directly if you want to test just DB load, not the HTTP layer.
Create a Django ORM Test Script:

# locustfile.py
import os
import django
from locust import TaskSet, task, between, User

# Set Django settings
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "your_project.settings")
django.setup()

from your_app.models import Product

class DBTaskSet(TaskSet):
    @task
    def query_db(self):
        list(Product.objects.all()[:10])

class DBUser(User):
    wait_time = between(1, 2)
    tasks = [DBTaskSet]


Run it like:
locust -f locustfile.py


7. Tips for Better DB Load Testing
Simulate inserts/updates too:
@task
def create_product(self):
    Product.objects.create(name="Test", price=100)


Add test data beforehand (via fixtures or script)

Use Django DEBUG = False for realism

Disable query caching if needed (QuerySet().iterator())

8. Monitoring the DB (YugabyteDB)
Watch YugabyteDB metrics via its Admin UI (:7000 or :15433)

Check disk I/O, CPU, QPS, slow queries

Use yb-ctl or yb_stats.py for CLI monitoring

# Command:
locust -f db_locust_test.py --headless -u 100 -r 10 --run-time 2m --csv=db_test_results
